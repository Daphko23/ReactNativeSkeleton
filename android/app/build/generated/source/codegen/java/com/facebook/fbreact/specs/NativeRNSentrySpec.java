
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.facebook.fbreact.specs;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public abstract class NativeRNSentrySpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "RNSentry";

  public NativeRNSentrySpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  @ReactMethod
  @DoNotStrip
  public abstract void addListener(String eventType);

  @ReactMethod
  @DoNotStrip
  public abstract void removeListeners(double id);

  @ReactMethod
  @DoNotStrip
  public abstract void getNewScreenTimeToDisplay(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addBreadcrumb(ReadableMap breadcrumb);

  @ReactMethod
  @DoNotStrip
  public abstract void captureEnvelope(String bytes, ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void captureScreenshot(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void clearBreadcrumbs();

  @ReactMethod
  @DoNotStrip
  public abstract void crash();

  @ReactMethod
  @DoNotStrip
  public abstract void closeNativeSdk(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void disableNativeFramesTracking();

  @ReactMethod
  @DoNotStrip
  public abstract void fetchNativeRelease(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void fetchNativeSdkInfo(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void fetchNativeDeviceContexts(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void fetchNativeAppStart(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void fetchNativeFrames(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void initNativeSdk(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setUser(@Nullable ReadableMap defaultUserKeys, @Nullable ReadableMap otherUserKeys);

  @ReactMethod
  @DoNotStrip
  public abstract void setContext(String key, @Nullable ReadableMap value);

  @ReactMethod
  @DoNotStrip
  public abstract void setExtra(String key, String value);

  @ReactMethod
  @DoNotStrip
  public abstract void setTag(String key, String value);

  @ReactMethod
  @DoNotStrip
  public abstract void enableNativeFramesTracking();

  @ReactMethod
  @DoNotStrip
  public abstract void fetchModules(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void fetchViewHierarchy(Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap startProfiling(boolean platformProfilers);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract WritableMap stopProfiling();

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract @Nullable String fetchNativePackageName();

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract @Nullable WritableMap fetchNativeStackFramesBy(ReadableArray instructionsAddr);

  @ReactMethod
  @DoNotStrip
  public abstract void initNativeReactNavigationNewFrameTracking(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void captureReplay(boolean isHardCrash, Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract @Nullable String getCurrentReplayId();

  @ReactMethod
  @DoNotStrip
  public abstract void crashedLastRun(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getDataFromUri(String uri, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void popTimeToDisplayFor(String key, Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract boolean setActiveSpanId(String spanId);
}
