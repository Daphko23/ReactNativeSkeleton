
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "RNSentrySpec.h"

namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "addListener", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeListeners", "(D)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_getNewScreenTimeToDisplay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getNewScreenTimeToDisplay", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_addBreadcrumb(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "addBreadcrumb", "(Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_captureEnvelope(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "captureEnvelope", "(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_captureScreenshot(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "captureScreenshot", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_clearBreadcrumbs(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "clearBreadcrumbs", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_crash(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "crash", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_closeNativeSdk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "closeNativeSdk", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_disableNativeFramesTracking(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "disableNativeFramesTracking", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeRelease(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchNativeRelease", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeSdkInfo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchNativeSdkInfo", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeDeviceContexts(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchNativeDeviceContexts", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeAppStart(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchNativeAppStart", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeFrames(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchNativeFrames", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_initNativeSdk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "initNativeSdk", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setUser(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setUser", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setContext(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setContext", "(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setExtra(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setExtra", "(Ljava/lang/String;Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setTag(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setTag", "(Ljava/lang/String;Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_enableNativeFramesTracking(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "enableNativeFramesTracking", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchModules(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchModules", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchViewHierarchy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "fetchViewHierarchy", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_startProfiling(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "startProfiling", "(Z)Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_stopProfiling(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "stopProfiling", "()Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativePackageName(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, StringKind, "fetchNativePackageName", "()Ljava/lang/String;", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_fetchNativeStackFramesBy(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "fetchNativeStackFramesBy", "(Lcom/facebook/react/bridge/ReadableArray;)Lcom/facebook/react/bridge/WritableMap;", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_initNativeReactNavigationNewFrameTracking(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "initNativeReactNavigationNewFrameTracking", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_captureReplay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "captureReplay", "(ZLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_getCurrentReplayId(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, StringKind, "getCurrentReplayId", "()Ljava/lang/String;", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_crashedLastRun(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "crashedLastRun", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_getDataFromUri(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getDataFromUri", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_popTimeToDisplayFor(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "popTimeToDisplayFor", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRNSentrySpecJSI_setActiveSpanId(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, BooleanKind, "setActiveSpanId", "(Ljava/lang/String;)Z", args, count, cachedMethodId);
}

NativeRNSentrySpecJSI::NativeRNSentrySpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_removeListeners};
  methodMap_["getNewScreenTimeToDisplay"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_getNewScreenTimeToDisplay};
  methodMap_["addBreadcrumb"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_addBreadcrumb};
  methodMap_["captureEnvelope"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_captureEnvelope};
  methodMap_["captureScreenshot"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_captureScreenshot};
  methodMap_["clearBreadcrumbs"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_clearBreadcrumbs};
  methodMap_["crash"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_crash};
  methodMap_["closeNativeSdk"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_closeNativeSdk};
  methodMap_["disableNativeFramesTracking"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_disableNativeFramesTracking};
  methodMap_["fetchNativeRelease"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeRelease};
  methodMap_["fetchNativeSdkInfo"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeSdkInfo};
  methodMap_["fetchNativeDeviceContexts"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeDeviceContexts};
  methodMap_["fetchNativeAppStart"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeAppStart};
  methodMap_["fetchNativeFrames"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativeFrames};
  methodMap_["initNativeSdk"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_initNativeSdk};
  methodMap_["setUser"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setUser};
  methodMap_["setContext"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setContext};
  methodMap_["setExtra"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setExtra};
  methodMap_["setTag"] = MethodMetadata {2, __hostFunction_NativeRNSentrySpecJSI_setTag};
  methodMap_["enableNativeFramesTracking"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_enableNativeFramesTracking};
  methodMap_["fetchModules"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchModules};
  methodMap_["fetchViewHierarchy"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchViewHierarchy};
  methodMap_["startProfiling"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_startProfiling};
  methodMap_["stopProfiling"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_stopProfiling};
  methodMap_["fetchNativePackageName"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_fetchNativePackageName};
  methodMap_["fetchNativeStackFramesBy"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_fetchNativeStackFramesBy};
  methodMap_["initNativeReactNavigationNewFrameTracking"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_initNativeReactNavigationNewFrameTracking};
  methodMap_["captureReplay"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_captureReplay};
  methodMap_["getCurrentReplayId"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_getCurrentReplayId};
  methodMap_["crashedLastRun"] = MethodMetadata {0, __hostFunction_NativeRNSentrySpecJSI_crashedLastRun};
  methodMap_["getDataFromUri"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_getDataFromUri};
  methodMap_["popTimeToDisplayFor"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_popTimeToDisplayFor};
  methodMap_["setActiveSpanId"] = MethodMetadata {1, __hostFunction_NativeRNSentrySpecJSI_setActiveSpanId};
}

std::shared_ptr<TurboModule> RNSentrySpec_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "RNSentry") {
    return std::make_shared<NativeRNSentrySpecJSI>(params);
  }
  return nullptr;
}

} // namespace facebook::react
