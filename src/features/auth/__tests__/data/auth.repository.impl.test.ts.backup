/**\n * @fileoverview Auth Repository Tests - SIMPLIFIED\n * Basic tests for Auth Repository functionality without complex container dependencies\n */\n\nimport { AuthRepositoryImpl } from '@features/auth/data/repository/auth.repository.impl';\nimport { AuthSupabaseDatasource } from '@features/auth/data/sources/auth.supabase.datasource';\nimport { AuthUserDto } from '@features/auth/data/dtos/auth-user.dto';\n\njest.mock('@features/auth/data/sources/auth.supabase.datasource');\n\n// Mock the Supabase configuration\njest.mock('@core/config/supabase.config', () => ({\n  supabase: {\n    auth: {\n      signUp: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })),\n      signInWithPassword: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })),\n      signOut: jest.fn(() => Promise.resolve({ error: null })),\n      getSession: jest.fn(() => Promise.resolve({ data: { session: null }, error: null })),\n      getUser: jest.fn(() => Promise.resolve({ data: { user: null }, error: null })),\n    },\n  },\n}));\n\ndescribe('AuthRepositoryImpl - BASIC TESTS', () => {\n  let authRepository: AuthRepositoryImpl;\n  let mockDataSource: jest.Mocked<AuthSupabaseDatasource>;\n\n  beforeEach(() => {\n    mockDataSource = new AuthSupabaseDatasource() as jest.Mocked<AuthSupabaseDatasource>;\n    authRepository = new AuthRepositoryImpl(mockDataSource);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Basic Authentication', () => {\n    it('should login and return AuthUser', async () => {\n      const mockSupabaseUserDto: AuthUserDto = {\n        id: 'user123',\n        email: 'test@example.com',\n        emailVerified: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        displayName: 'Test User',\n        photoURL: 'http://photo.url',\n      };\n\n      mockDataSource.signInWithEmailAndPassword.mockResolvedValueOnce();\n      mockDataSource.getCurrentUser.mockResolvedValueOnce(mockSupabaseUserDto);\n\n      const result = await authRepository.login('test@example.com', 'password123');\n\n      expect(mockDataSource.signInWithEmailAndPassword).toHaveBeenCalledWith(\n        'test@example.com',\n        'password123'\n      );\n\n      expect(result).toMatchObject({\n        id: 'user123',\n        email: 'test@example.com',\n        displayName: 'Test User',\n        photoURL: 'http://photo.url',\n      });\n    });\n\n    it('should register and return AuthUser', async () => {\n      const mockSupabaseUserDto: AuthUserDto = {\n        id: 'user123',\n        email: 'newuser@example.com',\n        emailVerified: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        displayName: null,\n        photoURL: null,\n      };\n\n      mockDataSource.createUserWithEmailAndPassword.mockResolvedValueOnce();\n      mockDataSource.getCurrentUser.mockResolvedValueOnce(mockSupabaseUserDto);\n\n      const result = await authRepository.register('newuser@example.com', 'password123');\n\n      expect(mockDataSource.createUserWithEmailAndPassword).toHaveBeenCalledWith(\n        'newuser@example.com',\n        'password123'\n      );\n\n      expect(result).toMatchObject({\n        id: 'user123',\n        email: 'newuser@example.com',\n      });\n    });\n\n    it('should logout the user', async () => {\n      mockDataSource.signOut.mockResolvedValueOnce();\n\n      await authRepository.logout();\n\n      expect(mockDataSource.signOut).toHaveBeenCalled();\n    });\n  });\n\n  describe('User Management', () => {\n    it('should get current user', async () => {\n      const mockSupabaseUserDto: AuthUserDto = {\n        id: 'user123',\n        email: 'current@example.com',\n        emailVerified: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        displayName: 'Current User',\n        photoURL: null,\n      };\n\n      mockDataSource.getCurrentUser.mockResolvedValueOnce(mockSupabaseUserDto);\n\n      const result = await authRepository.getCurrentUser();\n\n      expect(mockDataSource.getCurrentUser).toHaveBeenCalled();\n      expect(result).toMatchObject({\n        id: 'user123',\n        email: 'current@example.com',\n        displayName: 'Current User',\n      });\n    });\n\n    it('should handle password reset', async () => {\n      mockDataSource.resetPasswordForEmail.mockResolvedValueOnce();\n\n      await authRepository.resetPassword('test@example.com');\n\n      expect(mockDataSource.resetPasswordForEmail).toHaveBeenCalledWith('test@example.com');\n    });\n  });\n});
