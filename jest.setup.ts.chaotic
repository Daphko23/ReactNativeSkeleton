jest.mock("@core/logging/logger.factory", () => ({ 
  LoggerFactory: { 
    createServiceLogger: jest.fn().mockReturnValue({ 
      info: jest.fn(),
      warn: jest.fn().mockImplementation(() => {
        // Rufe console.warn auf damit Tests funktionieren
        if (global.console && global.console.warn) {
          global.console.warn.apply(null, arguments);
        }
      }),
      error: jest.fn(),
      debug: jest.fn() 
    }) 
  } 
}));

// =============================================================================
// ðŸ”§ GLOBALE CONSOLE MOCKS (FÃ¼r Test Expectations)
// =============================================================================

// Mock console.warn global fÃ¼r alle Tests
global.console = {
  ...console,
  warn: jest.fn(),
  error: jest.fn(),
  log: jest.fn(),
  info: jest.fn(),
};

/**
 * @file jest.setup.js
 * @description Jest Setup-Datei fÃ¼r die Testumgebung
 */

/* global jest */

import mockReact from 'react';

jest.mock('react-native-localize');

// =============================================================================
// ðŸ”§ DIREKTE CORE MODULE MOCKS (Verhindert Logger Factory Fehler)  
// =============================================================================

// Mock Logger Factory komplett
jest.mock('@core/logging/logger.factory', () => ({
  LoggerFactory: {
    createServiceLogger: jest.fn().mockReturnValue({
      info: jest.fn(),
      warn: jest.fn(),
      error: jest.fn(),
      debug: jest.fn(),
    }),
  },
}));

// Mock Logger Service Interface
jest.mock('@core/logging/logger.service.interface', () => ({
  LogCategory: {
    SECURITY: 'SECURITY',
    BUSINESS: 'BUSINESS', 
    AUTH: 'AUTH',
    UI: 'UI',
  },
}));

// Mock fÃ¼r Supabase
jest.mock('@core/config/supabase.config', () => ({
  supabase: {
    auth: {
      signInWithPassword: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),
      signUp: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),
      signOut: jest.fn().mockResolvedValue({ error: null }),
      resetPasswordForEmail: jest.fn().mockResolvedValue({ error: null }),
      getUser: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),
      getSession: jest.fn().mockResolvedValue({ data: { session: null }, error: null }),
      onAuthStateChange: jest.fn().mockReturnValue({
        data: { subscription: { unsubscribe: jest.fn() } }
      }),
    },
    from: jest.fn(() => ({
      select: jest.fn(() => ({
        eq: jest.fn(() => ({
          single: jest.fn().mockResolvedValue({ data: null, error: null }),
        })),
        order: jest.fn().mockResolvedValue({ data: [], error: null }),
      })),
      insert: jest.fn(() => ({
        select: jest.fn(() => ({
          single: jest.fn().mockResolvedValue({ data: null, error: null }),
        })),
      })),
      update: jest.fn(() => ({
        eq: jest.fn(() => ({
          select: jest.fn(() => ({
            single: jest.fn().mockResolvedValue({ data: null, error: null }),
          })),
        })),
      })),
      delete: jest.fn(() => ({
        eq: jest.fn().mockResolvedValue({ error: null }),
      })),
    })),
  },
}));

// Mock fÃ¼r React Native
jest.mock('react-native', () => {
  return {
    StyleSheet: {
      create: jest.fn(styles => styles),
      flatten: jest.fn(style => style),
    },
    View: 'View',
    Text: 'Text',
    TextInput: 'TextInput',
    TouchableOpacity: 'TouchableOpacity',
    ScrollView: 'ScrollView',
    SafeAreaView: 'View',
    Platform: {
      OS: 'android',
      Version: 30,
      select: jest.fn((platforms) => platforms.android || platforms.default),
    },
    PermissionsAndroid: {
      PERMISSIONS: {
        CAMERA: 'android.permission.CAMERA',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
      },
      RESULTS: {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again',
      },
      check: jest.fn().mockResolvedValue('granted'),
      request: jest.fn().mockResolvedValue('granted'),
    },
  };
});

// Mock fÃ¼r @react-navigation/native
jest.mock('@react-navigation/native', () => ({
  NavigationContainer: ({children}) => children,
  useNavigation: () => ({
    navigate: jest.fn(),
    goBack: jest.fn(),
  }),
}));

// Mock fÃ¼r @react-navigation/native-stack
jest.mock('@react-navigation/native-stack', () => ({
  createNativeStackNavigator: () => ({
    Navigator: ({children}) => children,
    Screen: ({children}) => children,
  }),
}));

// Mock fÃ¼r react-native-paper
jest.mock('react-native-paper', () => {
  return {
    Snackbar: ({children, visible, onDismiss, style}) => {
      if (!visible) return null;
      return mockReact.createElement(
        'div',
        {
          'data-testid': 'global-snackbar',
          style,
          onClick: onDismiss,
        },
        children
      );
    },
    PaperProvider: ({children}) => children,
  };
});

// Mock fÃ¼r react-native-safe-area-context
jest.mock('react-native-safe-area-context', () => ({
  SafeAreaProvider: ({children}) => children,
  useSafeAreaInsets: () => ({
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
  }),
}));
global.mockLoggerWarn = jest.fn().mockImplementation((msg, cat, meta, err) => { if(global.console && global.console.warn) global.console.warn(msg, err || meta?.error || ""); });
